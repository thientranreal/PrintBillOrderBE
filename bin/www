#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('printbillorderbe:server');
var http = require('http');
const { WebcastPushConnection } = require('tiktok-live-connector');


/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
const WebSocket = require('ws');

const wss = new WebSocket.Server({ server });
wss.on('connection', (ws, req) => {
  console.log('New client connected');

  // Send a welcome message
  ws.send(JSON.stringify({ username: 'tep', message: 'Welcome to the WebSocket server' }));

  // Handle connection close
  ws.on('close', () => {
    console.log('Client disconnected');
  });

  // Handle errors
  ws.on('error', (error) => {
    console.error('WebSocket error:', error);
  });
  // Replace this with the actual username you want to track
  const tiktokUsername = 'quangnguyen1234564';

  // Initialize TikTok Live connection
  const tiktokLiveConnection = new WebcastPushConnection(tiktokUsername);
  tiktokLiveConnection.connect().then(state => {
    console.log(`Connected to roomId ${state.roomId}`);

    tiktokLiveConnection.on('chat', data => {
      const message = {
        uniqueId: data.uniqueId,
        username: data.nickname,
        nickname: data.nickname,
        message: data.comment,
        avatarUrl: data.profilePictureUrl
      };
      console.log('Received message:', message);

      // Broadcast the message to all WebSocket clients
      wss.clients.forEach(client => {
        if (client.readyState === WebSocket.OPEN) {
          client.send(JSON.stringify(message));
        }
      });
    });

  }).catch(err => {
    console.error('Failed to connect to TikTok live:', err);
  })

});


/**
 * Listen on provided port, on all network interfaces.
 */



server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
